package com.example.remittance.service;

import com.example.remittance.domain.Account;
import com.example.remittance.domain.Transaction;
import com.example.remittance.domain.TransactionType;
import com.example.remittance.dto.DepositRequest;
import com.example.remittance.dto.TransactionResponse;
import com.example.remittance.dto.TransferRequest;
import com.example.remittance.dto.WithdrawRequest;
import com.example.remittance.repository.AccountRepository;
import com.example.remittance.repository.TransactionRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/*
* 1.계좌정보 조회
* 2.입금
* 3.출금
* */
@Service
@RequiredArgsConstructor
public class RemittanceService {
    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;

    //1. 계좌정보 조회
    public Long getAccountBalance(String accountNumber) {
        Account account = accountRepository.findByAccountNumber(accountNumber)
                .orElseThrow(() -> new RuntimeException("계좌 없음"));
        return account.getBalance();
    }

    //2. 입금
    public void deposit(DepositRequest request) {
        Account account = accountRepository.findByAccountNumber(request.getAccountNumber())
                .orElseThrow(() -> new RuntimeException("계좌를 찾을 수 없습니다."));

        // 입금
        account.plusBalance(request.getAmount());

        // 거래 내역 저장
        Transaction transaction = Transaction.builder()
                .account(account)
                .type(TransactionType.DEPOSIT)
                .amount(request.getAmount())
                .fee(0L)
                .createdAt(LocalDateTime.now())
                .build();

        transactionRepository.save(transaction);
        accountRepository.save(account); // 변경된 계좌 저장
    }

    //3.출금
    public void withdraw(WithdrawRequest request) {
        Account account = accountRepository.findByAccountNumber(request.accountNumber())
                .orElseThrow(() -> new RuntimeException("계좌를 찾을 수 없습니다."));

        LocalDate today = LocalDate.now();

        // 일자 초기화
        if (account.getLastWithdrawnDate() == null || !account.getLastWithdrawnDate().equals(today)) {
            account.saveDailyWithdrawnAmount(0L);
            account.saveLastWithdrawnDate(today);
        }

        // 한도 체크
        long newTotal = account.getDailyWithdrawnAmount() + request.amount();
        if (newTotal > 1_000_000L) {
            throw new RuntimeException("일일 출금 한도(1,000,000원)를 초과했습니다.");
        }

        // 잔액 부족 체크
        if (account.getBalance() < request.amount()) {
            throw new RuntimeException("잔액이 부족합니다.");
        }

        // 출금 처리
        // 잔액 저장
        account.minusBalance(request.amount());
        //출금 한도 저장
        account.saveDailyWithdrawnAmount(newTotal);

        // 거래 기록
        Transaction transaction = Transaction.builder()
                .account(account)
                .type(TransactionType.WITHDRAW)
                .amount(request.amount())
                .fee(0L)
                .createdAt(LocalDateTime.now())
                .build();

        transactionRepository.save(transaction);
        accountRepository.save(account);
    }

    //4.송금
    public void transfer(TransferRequest request) {
        //송금인
        Account remittor = accountRepository.findByAccountNumber(request.fromAccountNumber())
                .orElseThrow(() -> new RuntimeException("보내는 계좌를 찾을 수 없습니다."));

        //수취인
        Account addressee = accountRepository.findByAccountNumber(request.toAccountNumber())
                .orElseThrow(() -> new RuntimeException("받는 계좌를 찾을 수 없습니다."));

        if (remittor.equals(addressee)) {
            throw new RuntimeException("자기 계좌로 이체할 수 없습니다.");
        }

        // 인출 날짜 초기화
        LocalDate today = LocalDate.now();
        if (remittor.getLastWithdrawnDate() == null || !remittor.getLastWithdrawnDate().equals(today)) {
            remittor.saveDailyWithdrawnAmount(0L);
            remittor.saveLastWithdrawnDate(today);
        }

        //수수료
        long fee = Math.round(request.amount() * 0.01);
        //출금액
        long totalDeduction = request.amount() + fee;

        if (remittor.getBalance() < totalDeduction) {
            throw new RuntimeException("잔액이 부족합니다.");
        }

        long newDailyTotal = remittor.getDailyWithdrawnAmount() + request.amount();
        if (newDailyTotal > 3_000_000L) {
            throw new RuntimeException("일일 이체 한도(3,000,000원)를 초과했습니다.");
        }

        remittor.saveLastWithdrawnDate(today);

        // 출금 처리
        remittor.minusBalance(totalDeduction);
        remittor.saveDailyWithdrawnAmount(newDailyTotal);

        // 입금 처리
        addressee.plusBalance(request.amount());

        // 거래 내역 기록
        Transaction sendTx = Transaction.builder()
                .account(remittor)
                .type(TransactionType.TRANSFER)
                .amount(request.amount())
                .fee(fee)
                .createdAt(LocalDateTime.now())
                .build();

        Transaction receiveTx = Transaction.builder()
                .account(addressee)
                .type(TransactionType.RECEIVE)
                .amount(request.amount())
                .fee(0L)
                .createdAt(LocalDateTime.now())
                .build();

        transactionRepository.save(sendTx);
        transactionRepository.save(receiveTx);
        accountRepository.save(remittor);
        accountRepository.save(addressee);
    }

    //5. 거래내역조회
    public List<TransactionResponse> getTransactions(String accountNumber) {
        Account account = accountRepository.findByAccountNumber(accountNumber)
                .orElseThrow(() -> new RuntimeException("계좌를 찾을 수 없습니다."));

        return transactionRepository.findByAccountOrderByCreatedAtDesc(account)
                .stream()
                .map(tx -> new TransactionResponse(
                        tx.getId(),
                        tx.getType(),
                        tx.getAmount(),
                        tx.getFee(),
                        tx.getCreatedAt()
                ))
                .toList();
    }


    //계좌등록
    public void registerAccount(String accountNumber) {
        boolean exists = accountRepository.findByAccountNumber(accountNumber).isPresent();
        if (exists) {
            throw new RuntimeException("이미 존재하는 계좌입니다.");
        }

        Account newAccount = Account.builder()
                .accountNumber(accountNumber)
                .balance(0L)
                .dailyWithdrawnAmount(0L)
                .lastWithdrawnDate(LocalDate.now())
                .build();

        accountRepository.save(newAccount);
    }

    //계좌삭제
    public void deleteAccount(String accountNumber) {
    }
}
